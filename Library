local InputService = game:GetService('UserInputService');
local TextService = game:GetService('TextService');
local TweenService = game:GetService('TweenService');
local CoreGui = jogo:GetService('CoreGui');
local RunService = game:GetService('RunService')
local RenderStepped = RunService.RenderStepped;
local LocalPlayer = jogo:GetService('Jogadores').LocalPlayer;
local Mouse = LocalPlayer:GetMouse();

local ProtectGui = protectgui ou (syn e syn.protect_gui) ou (function() end);

local ScreenGui = Instance.new('ScreenGui');
ProtectGui(ScreenGui);

ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global;
ScreenGui.Parent = CoreGui;

Alterna local = {};
Opções locais = {};

getgenv().Toggles = Toggles;
getgenv().Options = Opções;

Biblioteca local = {
    Registro = {};
    RegistryMap = {};

    HudRegistry = {};

    FontColor = Color3.fromRGB(248, 248, 255);
    MainColor = Color3.fromRGB(20, 20, 20);
    BackgroundColor = Color3.fromRGB(20, 20, 20);
    AccentColor = Color3.fromRGB(148, 0, 211);
    OutlineColor = Color3.fromRGB(148, 0, 211);

    Preto = Cor3.novo(0, 0, 0);

    Quadros Abertos = {};

    Sinais = {};
    ScreenGui = ScreenGui;
};

local RainbowStep = 0
Matiz local = 0

table.insert(Library.Signals, RenderStepped:Connect(function(Delta)
    RainbowStep = RainbowStep + Delta

    se RainbowStep >= (1/60) então
        RainbowStep = 0

        Matiz = Matiz + (1/400);

        se Matiz > 1 então
            Matiz = 0;
        fim;

        Library.CurrentRainbowHue = Matiz;
        Library.CurrentRainbowColor = Color3.fromHSV(Hue, 0,8, 1);
    fim
fim))

Biblioteca de funções: Tentativa Salvar()
    se Library.SaveManager então
        Library.SaveManager:Save();
    fim;
fim;

Biblioteca de funções:Criar(Classe, Propriedades)
    local _Instance = Classe;

    if type(Class) == 'string' then
        _Instância = Instância.new(Classe);
    fim;

    para Propriedade, Valor em seguida, Propriedades fazem
        _Instance[Propriedade] = Valor;
    fim;

    return _Instance;
fim;

Biblioteca de funções:CreateLabel(Propriedades, IsHud)
    local _Instance = Library:Create('TextLabel', {
        Transparência de fundo = 1;
        Fonte = Enum.Font.Code;
        TextColor3 = Library.FontColor;
        TextSize = 16;
        TextStrokeTransparency = 0;
    });

    Biblioteca:AddToRegistry(_Instance, {
        TextColor3 = 'FontColor';
    }, IsHud);

    return Library:Create(_Instance, Properties);
fim;

Biblioteca de funções: MakeDraggable(Instance, Cutoff)
    Instance.Active = true;

   Instance.InputBegan:Connect(function(Input)
        se Input.UserInputType == Enum.UserInputType.MouseButton1 then
            local ObjPos = Vector2.new(
                Mouse.X - Instance.AbsolutePosition.X,
                Mouse.Y - Instance.AbsolutePosition.Y
            );

            se ObjPos.Y > (Cutoff ou 40) então
                Retorna;
            fim;

            enquanto InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) faça
                Instance.Position = UDim2.new(
                    0,
                    Mouse.X - ObjPos.X + (Instance.Size.X.Offset * Instance.AnchorPoint.X),
                    0,
                    Mouse.Y - ObjPos.Y + (Instance.Size.Y.Offset * Instance.AnchorPoint.Y)
                );

                RenderStepped:Wait();
            fim;
        fim;
    fim)
fim;

Biblioteca de funções: AddToolTip(InfoStr, HoverInstance)
    local X, Y = Biblioteca:GetTextBounds(InfoStr, Enum.Font.Code, 14);
    Dica de ferramenta local = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor,        
        BorderColor3 = Library.OutlineColor,

        Tamanho = UDim2.fromOffset(X + 5, Y + 4),
        ZÍndice = 11;
        Pai = Library.ScreenGui,

        Visível = falso,
    })

    etiqueta local = Biblioteca:CreateLabel({
        Posição = UDim2.fromOffset(3, 1),
        Tamanho = UDim2.fromOffset(X, Y);
        TextSize = 14;
        Text = InfoStr,
        TextColor3 = Library.FontColor,
        TextXAlignment = Enum.TextXAlignment.Left;
        ZÍndice = 12;

        Pai = Dica de ferramenta;
    });

    Biblioteca:AddToRegistry(dica, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'OutlineColor';
    });

    Biblioteca:AddToRegistry(Rótulo, {
        TextColor3 = 'FontColor',
    });

    local IsHovering = false
    HoverInstance.MouseEnter:Connect(function()
        IsHovering = true
        
        Dica de ferramenta.Posição = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 12)
        Dica de ferramenta.Visível = verdadeiro

        enquanto IsHovering faz
            RunService.Heartbeat:Wait()
            Dica de ferramenta.Posição = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 12)
        fim
    fim)

    HoverInstance.MouseLeave:Connect(function()
        IsHovering = false
        Dica de ferramenta.Visível = false
    fim)
fim

Biblioteca de funções:OnHighlight(HighlightInstance, Instance, Properties, PropertiesDefault)
    HighlightInstance.MouseEnter:Connect(function()
        local Reg = Library.RegistryMap[Instance];

        para Propriedade, ColorIdx em seguida, Propriedades fazem
            Instância[Propriedade] = Biblioteca[ColorIdx] ou ColorIdx;

            se Reg e Reg.Properties[Propriedade] então
                Reg.Properties[Propriedade] = ColorIdx;
            fim;
        fim;
    fim)

    HighlightInstance.MouseLeave:Connect(function()
        local Reg = Library.RegistryMap[Instance];

        para Property, ColorIdx em seguida, PropertiesDefault do
            Instância[Propriedade] = Biblioteca[ColorIdx] ou ColorIdx;

            se Reg e Reg.Properties[Propriedade] então
                Reg.Properties[Propriedade] = ColorIdx;
            fim;
        fim;
    fim)
fim;

Biblioteca de funções:MouseIsOverOpenedFrame()
    para Frame, _ em seguida, Library.OpenedFrames faça
        local AbsPos, AbsSize = Frame.AbsolutePosition, Frame.AbsoluteSize;

        if Mouse.X >= AbsPos.X e Mouse.X <= AbsPos.X + AbsSize.X
            e Mouse.Y >= AbsPos.Y e Mouse.Y <= AbsPos.Y + AbsSize.Y então

            retorne verdadeiro;
        fim;
    fim;
fim;

Biblioteca de funções:MapValue(Value, MinA, MaxA, MinB, MaxB)
    return (1 - ((Valor - MinA) / (MaxA - MinA))) * MinB + ((Valor - MinA) / (MaxA - MinA)) * MaxB;
fim;

Biblioteca de funções: GetTextBounds (Texto, Fonte, Tamanho, Resolução)
    local Bounds = TextService:GetTextSize(Texto, Tamanho, Fonte, Resolução ou Vector2.new(1920, 1080))
    return Limites.X, Limites.Y
fim;

Biblioteca de funções: GetDarkerColor(Color)
    local H, S, V = Color3.toHSV(Color);
    return Color3.fromHSV(H, S, V / 1,5);
fim;
Library.AccentColorDark = Library:GetDarkerColor(Library.AccentColor);

Biblioteca de funções:AddToRegistry(Instância, Propriedades, IsHud)
    Idx local = #Library.Registry + 1;
    Dados locais = {
        Instância = Instância;
        Propriedades = Propriedades;
        Idx = Idx;
    };

    table.insert(Biblioteca.Registro, Dados);
    Library.RegistryMap[Instance] = Dados;

    se IsHud então
        table.insert(Library.HudRegistry, Dados);
    fim;
fim;

Biblioteca de funções:RemoveFromRegistry(Instance)
    dados locais = Library.RegistryMap[Instance];

    se Dados então
        for Idx = #Library.Registry, 1, -1 do
            if Library.Registry[Idx] == Dados então
                table.remove(Library.Registry, Idx);
            fim;
        fim;

        for Idx = #Library.HudRegistry, 1, -1 do
            if Library.HudRegistry[Idx] == Dados então
                table.remove(Library.HudRegistry, Idx);
            fim;
        fim;

        Library.RegistryMap[Instance] = nil;
    fim;
fim;

Biblioteca de funções:UpdateColorsUsingRegistry()
    -- TODO: Poderia ter uma lista 'ativa' de objetos
    -- onde a lista ativa contém apenas objetos Visible.

    -- IMPL: pode configurar eventos .Changed na função AddToRegistry
    -- que escuta a propriedade 'Visible' sendo alterada.
    -- Visible: true => Adicionar à lista ativa e chamar a função UpdateColors
    -- Visible: false => Remover da lista ativa.

    -- O acima seria especialmente eficiente para uma cor de menu de arco-íris ou mudança de cor ao vivo.

    para Idx, Object em seguida, Library.Registry faça
        para Propriedade, ColorIdx em seguida, Object.Properties faça
            if type(ColorIdx) == 'string' então
                Object.Instance[Propriedade] = Biblioteca[ColorIdx];
            elseif type(ColorIdx) == 'função' then
                Object.Instance[Propriedade] = ColorIdx()
            fim
        fim;
    fim;
fim;

Biblioteca de funções:GiveSignal(Signal)
    -- Usado apenas para sinais não anexados a instâncias de biblioteca, pois eles devem ser limpos na destruição de objetos pelo Roblox
    table.insert(Biblioteca.Sinais, Sinal)
fim

Biblioteca de funções: Descarregar()
    -- Descarregue todos os sinais
    for Idx = #Library.Signals, 1, -1 do
        Conexão local = table.remove(Library.Signals, Idx)
        Conexão: Desconectar()
    fim

     -- Chame nosso retorno de chamada de descarregamento, talvez para desfazer alguns ganchos etc.
    se Library.OnUnload então
        Library.OnUnload()
    fim

    ScreenGui:Destroy()
fim

Biblioteca de funções: OnUnload(Callback)
    Library.OnUnload = retorno de chamada
fim

Biblioteca:GiveSignal(ScreenGui.DescendantRemoving:Connect(function(Instance)
    se Library.RegistryMap[Instance] então
        Biblioteca:RemoveFromRegistry(Instance);
    fim;
fim))

BaseAddons locais = {};

Faz
    funções locais = {};

    função Funções: AddColorPicker(Idx, Info)
        local ToggleLabel = self.TextLabel;
        local Container = self.Container;

        local ColorPicker = {
            Valor = Info.Default;
            Tipo = 'ColorPicker';
            Title = type(Info.Title) == 'string' e Info.Title ou 'Color picker',
        };

        função ColorPicker:SetHSVFromRGB(Cor)
            local H, S, V = Color3.toHSV(Color);

            ColorPicker.Hue = H;
            ColorPicker.Sat = S;
            ColorPicker.Vib = V;
        fim;

        ColorPicker:SetHSVFromRGB(ColorPicker.Value);

        local DisplayFrame = Library:Create('Frame', {
            BackgroundColor3 = ColorPicker.Value;
            BorderColor3 = Library:GetDarkerColor(ColorPicker.Value);
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(0, 28, 0, 14);
            ZÍndice = 6;
            Pai = ToggleLabel;
        });

        local RelativeOffset = 0;

        for _, Element in next, Container:GetChildren() do
            se não Element:IsA('UIListLayout') então
                RelativeOffset = RelativeOffset + Element.Size.Y.Offset;
            fim;
        fim;

        local PickerFrameOuter = Library:Create('Frame', {
            Nome = 'Cor';
            BackgroundColor3 = Color3.new(1, 1, 1);
            BorderColor3 = Color3.new(0, 0, 0);
            Posição = UDim2.new(0, 4, 0, 20 + RelativeOffset + 1);
            Tamanho = UDim2.new(1, -13, 0, 253);
            Visível = falso;
            ZÍndice = 15;
            Pai = Container.Parent;
        });

        local PickerFrameInner = Library:Create('Frame', {
            BackgroundColor3 = Library.BackgroundColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 16;
            Pai = PickerFrameOuter;
        });

        local Highlight = Library:Create('Frame', {
            BackgroundColor3 = Library.AccentColor;
            BorderSizePixel = 0;
            Tamanho = UDim2.new(1, 0, 0, 2);
            ZÍndice = 17;
            Pai = PickerFrameInner;
        });

        local SatVibMapOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Posição = UDim2.new(0, 4, 0, 25);
            Tamanho = UDim2.new(0, 200, 0, 200);
            ZÍndice = 17;
            Pai = PickerFrameInner;
        });

        local SatVibMapInner = Library:Create('Frame', {
            BackgroundColor3 = Library.BackgroundColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 18;
            Pai = SatVibMapOuter;
        });

        local SatVibMap = Library:Create('ImageLabel', {
            BorderSizePixel = 0;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 18;
            Imagem = 'rbxassetid://4155801252';
            Pai = SatVibMapInner;
        });

        local HueSelectorOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Posição = UDim2.new(0, 208, 0, 25);
            Tamanho = UDim2.new(0, 15, 0, 200);
            ZÍndice = 17;
            Pai = PickerFrameInner;
        });

        local HueSelectorInner = Library:Create('Frame', {
            BackgroundColor3 = Color3.new(1, 1, 1);
            BorderSizePixel = 0;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 18;
            Pai = HueSelectorOuter;
        });

        local HueTextSize = Library:GetTextBounds('Hex color', Enum.Font.Code, 16) + 3
        local RgbTextSize = Library:GetTextBounds('255, 255, 255', Enum.Font.Code, 16) + 3

        local HueBoxOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Posição = UDim2.fromOffset(4, 228),
            Tamanho = UDim2.new(0,5, -6, 0, 20),
            ZÍndice = 18,
            Pai = PickerFrameInner;
        });

        local HueBoxInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 18,
            Pai = HueBoxOuter;
        });

        Library:Create('UIGradient', {
            Cor = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
            });
            Rotação = 90;
            Pai = HueBoxInner;
        });

        local HueBox = Library:Create('TextBox', {
            Transparência de fundo = 1;
            Posição = UDim2.new(0, 5, 0, 0);
            Tamanho = UDim2.new(1, -5, 1, 0);
            Fonte = Enum.Font.Code;
            PlaceholderColor3 = Color3.fromRGB(190, 190, 190);
            PlaceholderText = 'Cor hexadecimal',
            Texto = '#FFFFFF',
            TextColor3 = Library.FontColor;
            TextSize = 14;
            TextStrokeTransparency = 0;
            TextXAlignment = Enum.TextXAlignment.Left;
            ZÍndice = 20,
            Pai = HueBoxInner;
        });

        local RgbBoxBase = Library:Create(HueBoxOuter:Clone(), {
            Posição = UDim2.new(0,5, 2, 0, 228),
            Tamanho = UDim2.new(0,5, -6, 0, 20),
            Pai = PickerFrameInner
        })  

        local RgbBox = Library:Create(RgbBoxBase.Frame:FindFirstChild('TextBox'), {
            Texto = '255, 255, 255',
            PlaceholderText = 'cor RGB',
            TextColor3 = Library.FontColor,
        })

        local DisplayLabel = Biblioteca:CreateLabel({
            Tamanho = UDim2.new(1, 0, 0, 14);
            Posição = UDim2.fromOffset(5, 5);
            TextXAlignment = Enum.TextXAlignment.Left;
            TextSize = 14;
            Text = ColorPicker.Title,--Info.Default;
            TextWrapped = false;
            ZÍndice = 16;
            Pai = PickerFrameInner;
        });


        Library:AddToRegistry(PickerFrameInner, { BackgroundColor3 = 'BackgroundColor'; BorderColor3 = 'OutlineColor'; });
        Library:AddToRegistry(Destaque, { BackgroundColor3 = 'AccentColor'; });
        Library:AddToRegistry(SatVibMapInner, { BackgroundColor3 = 'BackgroundColor'; BorderColor3 = 'OutlineColor'; });

        Library:AddToRegistry(HueBoxInner, { BackgroundColor3 = 'MainColor'; BorderColor3 = 'OutlineColor'; });
        Library:AddToRegistry(RgbBoxBase.Frame, { BackgroundColor3 = 'MainColor'; BorderColor3 = 'OutlineColor'; });
        Library:AddToRegistry(RgbBox, { TextColor3 = 'FontColor', });
        Library:AddToRegistry(HueBox, { TextColor3 = 'FontColor', });

        tabela de sequência local = {};

        para Matiz = 0, 1, 0,1 faça
            table.insert(SequenceTable, ColorSequenceKeypoint.new(Hue, Color3.fromHSV(Hue, 1, 1)));
        fim;

        local HueSelectorGradient = Library:Create('UIGradient', {
            Cor = ColorSequence.new(SequenceTable);
            Rotação = 90;
            Pai = HueSelectorInner;
        });
        
        HueBox.FocusLost:Connect(function(enter)
            se entrar então
                sucesso local, resultado = pcall(Color3.fromHex, HueBox.Text)
                se sucesso e typeof(result) == 'Color3' então
                    ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib = Color3.toHSV(resultado)
                fim
            fim

            ColorPicker:Display()
        fim)

        RgbBox.FocusLost:Connect(function(enter)
            se entrar então
                local r, g, b = RgbBox.Text:match('(%d+),%s*(%d+),%s*(%d+)')
                se r e g e b então
                    ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib = Color3.toHSV(Color3.fromRGB(r, g, b))
                fim
            fim

            ColorPicker:Display()
        fim)

        função ColorPicker:Display()
            ColorPicker.Value = Color3.fromHSV(ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib);
            SatVibMap.BackgroundColor3 = Color3.fromHSV(ColorPicker.Hue, 1, 1);

            Biblioteca:Criar(DisplayFrame, {
                BackgroundColor3 = ColorPicker.Value;
                BorderColor3 = Library:GetDarkerColor(ColorPicker.Value);
            });

            HueBox.Text = '#' .. ColorPicker.Value:ToHex()
            RgbBox.Text = table.concat({ math.floor(ColorPicker.Value.R * 255), math.floor(ColorPicker.Value.G * 255), math.floor(ColorPicker.Value.B * 255) }, ' , ')

            se ColorPicker.Changed então
                ColorPicker.Changed();
            fim;
        fim;

        função ColorPicker: OnChanged(Func)
            ColorPicker.Changed = Func;
            Func();
        fim;

        função ColorPicker:Show()
            para Frame, Val em seguida, Library.OpenedFrames do
                if Frame.Name == 'Cor' então
                    Quadro.Visível = false;
                    Library.OpenedFrames[Frame] = nil;
                fim;
            fim;

            PickerFrameOuter.Visible = true;
            Library.OpenedFrames[PickerFrameOuter] = true;
        fim;

        função ColorPicker:Ocultar()
            PickerFrameOuter.Visible = false;
            Library.OpenedFrames[PickerFrameOuter] = nil;
        fim;

        função ColorPicker:SetValue(HSV)
            local Color = Color3.fromHSV(HSV[1], HSV[2], HSV[3]);

            ColorPicker:SetHSVFromRGB(Cor);
            ColorPicker:Display();
        fim;

        função ColorPicker:SetValueRGB(Cor)
            ColorPicker:SetHSVFromRGB(Cor);
            ColorPicker:Display();
        fim;

        SatVibMap.InputBegan:Connect(function(Input)
            se Input.UserInputType == Enum.UserInputType.MouseButton1 then
                enquanto InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) faça
                    local MinX = SatVibMap.AbsolutePosition.X;
                    local MaxX = MinX + SatVibMap.AbsoluteSize.X;
                    local MouseX = math.clamp(Mouse.X, MinX, MaxX);

                    local MinY = SatVibMap.AbsolutePosition.Y;
                    local MaxY = MinY + SatVibMap.AbsoluteSize.Y;
                    local MouseY = math.clamp(Mouse.Y, MinY, MaxY);

                    ColorPicker.Sat = (MouseX - MinX) / (MaxX - MinX);
                    ColorPicker.Vib = 1 - ((MouseY - MinY) / (MaxY - MinY));
                    ColorPicker:Display();

                    RenderStepped:Wait();
                fim;

                Biblioteca: Tentativa de Salvar();
            fim;
        fim);

        HueSelectorInner.InputBegan:Connect(function(Input)
            se Input.UserInputType == Enum.UserInputType.MouseButton1 then
                enquanto InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) faça
                    local MinY = HueSelectorInner.AbsolutePosition.Y;
                    local MaxY = MinY + HueSelectorInner.AbsoluteSize.Y;
                    local MouseY = math.clamp(Mouse.Y, MinY, MaxY);

                    ColorPicker.Hue = ((MouseY - MinY) / (MaxY - MinY));
                    ColorPicker:Display();

                    RenderStepped:Wait();
                fim;

                Biblioteca: Tentativa de Salvar();
            fim;
        fim);

        DisplayFrame.InputBegan:Connect(function(Input)
            se Input.UserInputType == Enum.UserInputType.MouseButton1 e não Library:MouseIsOverOpenedFrame() então
                se PickerFrameOuter.Visible então
                    ColorPicker:Ocultar();
                senão
                    ColorPicker:Mostrar();
                fim;
            fim;
        fim);

        Biblioteca:GiveSignal(InputService.InputBegan:Connect(function(Input)
            se Input.UserInputType == Enum.UserInputType.MouseButton1 then
                local AbsPos, AbsSize = PickerFrameOuter.AbsolutePosition, PickerFrameOuter.AbsoluteSize;

                if Mouse.X < AbsPos.X ou Mouse.X > AbsPos.X + AbsSize.X
                    ou Mouse.Y < (AbsPos.Y - 20 - 1) ou Mouse.Y > AbsPos.Y + AbsSize.Y então

                    ColorPicker:Ocultar();
                fim;
            fim;
        fim))

        ColorPicker:Display();

        Opções[Idx] = ColorPicker;

        retornar a si mesmo;
    fim;

    função Funções: AddKeyPicker(Idx, Info)
        local ParentObj = self;
        local ToggleLabel = self.TextLabel;
        local Container = self.Container;

        local KeyPicker = {
            Valor = Info.Default;
            Alternado = falso;
            Modo = Info.Mode ou 'Alternar'; -- Sempre, Alternar, Segurar
            Tipo = 'KeyPicker';

            SyncToggleState = Info.SyncToggleState ou false;
        };

        se KeyPicker.SyncToggleState então
            Info.Modes = { 'Alternar' }
            Info.Mode = 'Alternar'
        fim

        local RelativeOffset = 0;

        for _, Element in next, Container:GetChildren() do
            se não Element:IsA('UIListLayout') então
                RelativeOffset = RelativeOffset + Element.Size.Y.Offset;
            fim;
        fim;

        local PickOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Tamanho = UDim2.new(0, 28, 0, 15);
            ZÍndice = 6;
            Pai = ToggleLabel;
        });

        local PickInner = Library:Create('Frame', {
            BackgroundColor3 = Library.BackgroundColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 7;
            Pai = PickOuter;
        });

        Biblioteca:AddToRegistry(PickInner, {
            BackgroundColor3 = 'BackgroundColor';
            BorderColor3 = 'OutlineColor';
        });

        local DisplayLabel = Biblioteca:CreateLabel({
            Tamanho = UDim2.new(1, 0, 1, 0);
            TextSize = 13;
            Texto = Info.Default;
            TextWrapped = true;
            ZÍndice = 8;
            Pai = PickInner;
        });

        local ModeSelectOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Posição = UDim2.new(1, 0, 0, RelativeOffset + 1);
            Tamanho = UDim2.new(0, 60, 0, 45 + 2);
            Visível = falso;
            ZÍndice = 14;
            Pai = Container.Parent;
        });

        local ModeSelectInner = Library:Create('Frame', {
            BackgroundColor3 = Library.BackgroundColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 15;
            Pai = ModeSelectOuter;
        });

        Biblioteca:AddToRegistry(ModeSelectInner, {
            BackgroundColor3 = 'BackgroundColor';
            BorderColor3 = 'OutlineColor';
        });

        Library:Create('UIListLayout', {
            FillDirection = Enum.FillDirection.Vertical;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Pai = ModeSelectInner;
        });

        local ContainerLabel = Biblioteca:CreateLabel({
            TextXAlignment = Enum.TextXAlignment.Left;
            Tamanho = UDim2.new(1, 0, 0, 18);
            TextSize = 13;
            Visível = falso;
            ZÍndice = 110;
            Pai = Library.KeybindContainer;
        }, verdadeiro);

        Modos locais = Info.Modes ou { 'Sempre', 'Alternar', 'Reter' };
        botões de modo locais = {};

        para Idx, Mode in next, Modes do
            local ModeButton = {};

            etiqueta local = Biblioteca:CreateLabel({
                Tamanho = UDim2.new(1, 0, 0, 15);
                TextSize = 13;
                Texto = Modo;
                ZÍndice = 16;
                Pai = ModeSelectInner;
            });

            função ModeButton:Selecionar()
                for _, Button in next, ModeButtons fazem
                    Botão:Deselecionar();
                fim;

                KeyPicker.Mode = Modo;

                Label.TextColor3 = Library.AccentColor;
                Library.RegistryMap[Label].Properties.TextColor3 = 'AccentColor';

                ModeSelectOuter.Visible = false;
            fim;

            função ModeButton:Deselecionar()
                KeyPicker.Mode = nil;

                Label.TextColor3 = Library.FontColor;
                Library.RegistryMap[Label].Properties.TextColor3 = 'FontColor';
            fim;

            Label.InputBegan:Connect(function(Input)
                se Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    ModeButton:Selecionar();
                    Biblioteca: Tentativa de Salvar();
                fim;
            fim);

            if Mode == KeyPicker.Mode then
                ModeButton:Selecionar();
            fim;

            ModeButtons[Mode] = ModeButton;
        fim;

        função KeyPicker:Atualizar()
            se Info.NoUI então
                Retorna;
            fim;

            estado local = KeyPicker:GetState();

            ContainerLabel.Text = string.format('[%s] %s (%s)', KeyPicker.Value, Info.Text, KeyPicker.Mode);

            ContainerLabel.Visible = true;
            ContainerLabel.TextColor3 = Estado e Library.AccentColor ou Library.FontColor;

            Library.RegistryMap[ContainerLabel].Properties.TextColor3 = Estado e 'AccentColor' ou 'FontColor';

            local YTamanho = 0
            XSize local = 0
            
            for _, Label in next, Library.KeybindContainer:GetChildren() do
                if Label:IsA('TextLabel') e Label.Visible then
                    YTamanho = YTamanho + 18;
                    if (Label.TextBounds.X > XSize) então
                        XSize = Label.TextBounds.X
                    fim
                fim;
            fim;

            Library.KeybindFrame.Size = UDim2.new(0, math.max(XSize + 10, 210), 0, YSize + 23)
        fim;

        função KeyPicker:GetState()
            if KeyPicker.Mode == 'Sempre' então
                retorne verdadeiro;
            elseif KeyPicker.Mode == 'Hold' then
                chave local = KeyPicker.Value;

                se Chave == 'MB1' ou Chave == 'MB2' então
                    return Key == 'MB1' e InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                        ou Key == 'MB2' e InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2);
                senão
                    return InputService:IsKeyDown(Enum.KeyCode[KeyPicker.Value]);
                fim;
            senão
                return KeyPicker.Toggled;
            fim;
        fim;

        função KeyPicker:SetValue(Data)
            Chave local, Modo = Dados[1], Dados[2];
            DisplayLabel.Text = Chave;
            KeyPicker.Value = Chave;
            ModeButtons[Mode]:Select();
            KeyPicker:Atualizar();
        fim;

        função KeyPicker: OnClick(Callback)
            KeyPicker.Clicked = retorno de chamada
        fim


        se ParentObj.Addons então
            table.insert(ParentObj.Addons, KeyPicker)
        fim

        função KeyPicker:DoClick()
            se ParentObj.Type == 'Toggle' e KeyPicker.SyncToggleState então
                ParentObj:SetValue(não ParentObj.Value)
            fim

            se KeyPicker.Clicked então
                KeyPicker.Clicked()
            fim
        fim

        Seleção local = false;

        PickOuter.InputBegan:Connect(function(Input)
            se Input.UserInputType == Enum.UserInputType.MouseButton1 e não Library:MouseIsOverOpenedFrame() então
                Seleção = verdadeiro;

                DisplayLabel.Text = '';

                pausa local;
                texto local = '';

                task.spawn(function()
                    enquanto (não Break) faz
                        if Texto == '...' então
                            Texto = '';
                        fim;

                        Texto = Texto .. '.';
                        DisplayLabel.Text = Texto;

                        espere(0,4);
                    fim;
                fim);

                espera(0,2);

                Evento local;
                Evento = InputService.InputBegan:Connect(function(Input)
                    chave local;

                    se Input.UserInputType == Enum.UserInputType.Keyboard então
                        Chave = Input.KeyCode.Name;
                    elseif Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Chave = 'MB1';
                    elseif Input.UserInputType == Enum.UserInputType.MouseButton2 then
                        Chave = 'MB2';
                    fim;

                    Quebra = verdadeiro;
                    Seleção = falso;

                    DisplayLabel.Text = Chave;
                    KeyPicker.Value = Chave;

                    Biblioteca: Tentativa de Salvar();

                    Evento:Desconectar();
                fim);
            elseif Input.UserInputType == Enum.UserInputType.MouseButton2 e não Library:MouseIsOverOpenedFrame() então
                ModeSelectOuter.Visible = true;
            fim;
        fim);

        Biblioteca:GiveSignal(InputService.InputBegan:Connect(function(Input)
            se (não Picking) então
                se KeyPicker.Mode == 'Alternar' então
                    chave local = KeyPicker.Value;

                    se Chave == 'MB1' ou Chave == 'MB2' então
                        if Key == 'MB1' e Input.UserInputType == Enum.UserInputType.MouseButton1
                        ou Key == 'MB2' e Input.UserInputType == Enum.UserInputType.MouseButton2 então
                            KeyPicker.Toggled = não KeyPicker.Toggled
                            KeyPicker:DoClick()
                        fim;
                    elseif Input.UserInputType == Enum.UserInputType.Keyboard then
                        if Input.KeyCode.Name == Chave então
                            KeyPicker.Toggled = não KeyPicker.Toggled;
                            KeyPicker:DoClick()
                        fim;
                    fim;
                fim;

                KeyPicker:Atualizar();
            fim;

            se Input.UserInputType == Enum.UserInputType.MouseButton1 then
                local AbsPos, AbsSize = ModeSelectOuter.AbsolutePosition, ModeSelectOuter.AbsoluteSize;

                if Mouse.X < AbsPos.X ou Mouse.X > AbsPos.X + AbsSize.X
                    ou Mouse.Y < (AbsPos.Y - 20 - 1) ou Mouse.Y > AbsPos.Y + AbsSize.Y então

                    ModeSelectOuter.Visible = false;
                fim;
            fim;
        fim))

        Biblioteca:GiveSignal(InputService.InputEnded:Connect(function(Input)
            se (não Picking) então
                KeyPicker:Atualizar();
            fim;
        fim))

        KeyPicker:Atualizar();

        Opções[Idx] = KeyPicker;

        retornar a si mesmo;
    fim;

    BaseAddons.__index = Funções;
    BaseAddons.__namecall = function(Tabela, Chave, ...)
        return Funcs[Chave](...);
    fim;
fim;

local BaseGroupbox = {};

Faz
    funções locais = {};

    função Funções: AddBlank(Size)
        local Groupbox = self;
        local Container = Groupbox.Container;

        Biblioteca:Create('Frame', {
            Transparência de fundo = 1;
            Tamanho = UDim2.new(1, 0, 0, Tamanho);
            ZÍndice = 1;
            Pai = Contêiner;
        });
    fim;

    função Funcs:AddLabel(Texto, DoesWrap)
        rótulo local = {};

        local Groupbox = self;
        local Container = Groupbox.Container;

        local TextLabel = Biblioteca:CreateLabel({
            Tamanho = UDim2.new(1, -4, 0, 15);
            TextSize = 14;
            Texto = Texto;
            TextWrapped = DoesWrap ou false,
            RichText = true,
            TextXAlignment = Enum.TextXAlignment.Left;
            ZÍndice = 5;
            Pai = Contêiner;
        });

        se DoesWrap então
            local Y = select(2, Library:GetTextBounds(Text, Enum.Font.Code, 14, Vector2.new(TextLabel.AbsoluteSize.X, math.huge)))
            TextLabel.Size = UDim2.new(1, -4, 0, Y)
        senão
            Library:Create('UIListLayout', {
                Preenchimento = UDim.new(0, 4);
                FillDirection = Enum.FillDirection.Horizontal;
                HorizontalAlignment = Enum.HorizontalAlignment.Right;
                SortOrder = Enum.SortOrder.LayoutOrder;
                Pai = TextLabel;
            });
        fim

        Label.TextLabel = TextLabel;
        Label.Container = Container;

        função Label:SetText(Texto)
            TextLabel.Text = Texto

            se DoesWrap então
                local Y = select(2, Library:GetTextBounds(Text, Enum.Font.Code, 14, Vector2.new(TextLabel.AbsoluteSize.X, math.huge)))
                TextLabel.Size = UDim2.new(1, -4, 0, Y)
            fim

            Caixa de Grupo:Redimensionar();
        fim

        if (não DoesWrap) então
            setmetatable(Label, BaseAddons);
        fim

        Caixa de grupo:Adicionar em branco(5);
        Caixa de Grupo:Redimensionar();

        etiqueta de devolução;
    fim;

    função Funcs:AddButton(Texto, Func)
        Botão local = {};

        local Groupbox = self;
        local Container = Groupbox.Container;

        local ButtonOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Tamanho = UDim2.new(1, -4, 0, 20);
            ZÍndice = 5;
            Pai = Contêiner;
        });

        Biblioteca:AddToRegistry(ButtonOuter, {
            BorderColor3 = 'Preto';
        });

        local ButtonInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 6;
            Pai = ButtonOuter;
        });

        Biblioteca:AddToRegistry(ButtonInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        Library:Create('UIGradient', {
            Cor = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
            });
            Rotação = 90;
            Pai = ButtonInner;
        });

        local ButtonLabel = Biblioteca:CreateLabel({
            Tamanho = UDim2.new(1, 0, 1, 0);
            TextSize = 14;
            Texto = Texto;
            ZÍndice = 6;
            Pai = ButtonInner;
        });

        Biblioteca:OnHighlight(ButtonOuter, ButtonOuter,
            { BorderColor3 = 'AccentColor' },
            { BorderColor3 = 'Preto' }
        );

        ButtonOuter.InputBegan:Connect(function(Input)
            se Input.UserInputType == Enum.UserInputType.MouseButton1 e não Library:MouseIsOverOpenedFrame() então
                Func();
            fim;
        fim);

        Botão de função: AddTooltip(dica)
            if type(tip) == 'string' then
                Biblioteca: AddToolTip(dica, ButtonOuter)
            fim
            Botão de retorno
        fim

        Botão de função:AddButton(Texto, Func)
            SubBotão local = {}

            ButtonOuter.Size = UDim2.new(0.5, -2, 0, 20)
            
            local Outer = ButtonOuter:Clone()
            local Interno = Exterior.Frame;
            rótulo local = Inner:FindFirstChildWhichIsA('TextLabel')

            Outer.Position = UDim2.new(1, 2, 0, 0)
            Outer.Size = UDim2.fromOffset(ButtonOuter.AbsoluteSize.X - 2, ButtonOuter.AbsoluteSize.Y)
            Outer.Parent = ButtonOuter

            Label.Text = Texto;

            Biblioteca:AddToRegistry(Inner, {
                BackgroundColor3 = 'MainColor';
                BorderColor3 = 'OutlineColor';
            });
    
            Biblioteca:OnHighlight(Outer, Outer,
                { BorderColor3 = 'AccentColor' },
                { BorderColor3 = 'Preto' }
            )

            Library:Create('UIGradient', {
                Cor = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
                });

                Rotação = 90;
                Pai = Interno;
            });

            Outer.InputBegan:Connect(function(Input)
                se Input.UserInputType == Enum.UserInputType.MouseButton1 e não Library:MouseIsOverOpenedFrame() então
                    Func();
                fim;
            fim);

            função SubButton:AddTooltip(dica)
                if type(tip) == 'string' then
                    Biblioteca: AddToolTip(tip, Outer)
                fim
                retornar Subbotão
            fim

            retornar Subbotão
        fim

        Caixa de grupo:Adicionar em branco(5);
        Caixa de Grupo:Redimensionar();

        botão de retorno;
    fim;

    função Funções: AddDivider()
        local Groupbox = self;
        Contêiner local = self.Container

        Divisor local = {
            Tipo = 'Divisor',
        }

        Caixa de grupo:Adicionar em branco(2);
        local DividerOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Tamanho = UDim2.new(1, -4, 0, 5);
            ZÍndice = 5;
            Pai = Contêiner;
        });

        local DividerInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 6;
            Pai = DivisorOuter;
        });

        Biblioteca:AddToRegistry(DividerOuter, {
            BorderColor3 = 'Preto';
        });

        Biblioteca:AddToRegistry(DividerInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        Caixa de grupo:Adicionar em branco(9);
        Caixa de Grupo:Redimensionar();
    fim

    função Funcs:AddInput(Idx, Info)
        caixa de texto local = {
            Valor = Info.Default ou '';
            Numérico = Info.Numeric ou false;
            Finished = Info.Finished ou false;
            Tipo = 'Entrada';
        };

        local Groupbox = self;
        local Container = Groupbox.Container;

        local InputLabel = Biblioteca:CreateLabel({
            Tamanho = UDim2.new(1, 0, 0, 15);
            TextSize = 14;
            Texto = Info.Texto;
            TextXAlignment = Enum.TextXAlignment.Left;
            ZÍndice = 5;
            Pai = Contêiner;
        });

        Caixa de grupo:AddBlank(1);

        local TextBoxOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Tamanho = UDim2.new(1, -4, 0, 20);
            ZÍndice = 5;
            Pai = Contêiner;
        });

        local TextBoxInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 6;
            Pai = TextBoxOuter;
        });

        Biblioteca:AddToRegistry(TextBoxInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        Biblioteca:OnHighlight(TextBoxOuter, TextBoxOuter,
            { BorderColor3 = 'AccentColor' },
            { BorderColor3 = 'Preto' }
        );

        if type(Info.Tooltip) == 'string' then
            Biblioteca: AddToolTip(Info.Tooltip, TextBoxOuter)
        fim

        Library:Create('UIGradient', {
            Cor = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
            });
            Rotação = 90;
            Pai = TextBoxInner;
        });

        local Container = Library:Create('Frame', {
            Transparência de fundo = 1;
            ClipesDescendentes = true;

            Posição = UDim2.new(0, 5, 0, 0);
            Tamanho = UDim2.new(1, -5, 1, 0);

            ZÍndice = 7;
            Pai = TextBoxInner;
        })

        caixa local = Library:Create('TextBox', {
            Transparência de fundo = 1;

            Posição = UDim2.fromOffset(0, 0),
            Tamanho = UDim2.fromScale(5, 1),
            
            Fonte = Enum.Font.Code;
            PlaceholderColor3 = Color3.fromRGB(190, 190, 190);
            PlaceholderText = Info.Placeholder ou '';

            Texto = Info.Default ou '';
            TextColor3 = Library.FontColor;
            TextSize = 14;
            TextStrokeTransparency = 0;
            TextXAlignment = Enum.TextXAlignment.Left;

            ZÍndice = 7;
            Pai = Contêiner;
        });
        
        função Textbox:SetValue(Texto)
            se Info.MaxLength e #Text > Info.MaxLength então
                Text = Text:sub(1, Info.MaxLength);
            fim;

            se Textbox.Numeric então
                if (não tonumber(Text)) e Text:len() > 0 then
                    Text = Textbox.Value
                fim
            fim

            Textbox.Value = Texto;
            Box.Text = Texto;
                
            se Textbox.Changed then
                Textbox.Changed();
            fim;
        fim;

        if Textbox.Finished then
            Box.FocusLost:Connect(função(enter)
                se não entrar então retornar final
                
                Textbox:SetValue(Box.Text);
                Biblioteca: Tentativa de Salvar();
            fim)
        senão
            Box:GetPropertyChangedSignal('Texto'):Connect(function()
                Textbox:SetValue(Box.Text);
                Biblioteca: Tentativa de Salvar();
            fim);
        fim

        -- https://devforum.roblox.com/t/how-to-make-textboxes-follow-current-cursor-position/1368429/6
        -- obrigado nicemike40 :)

        função local Update()
            PADDING local = 5
            revelação local = Container.AbsoluteSize.X

            se não for Box:IsFocused() ou Box.TextBounds.X <= revelar - 2 * PADDING então
                -- não estamos focados, ou nos encaixamos, então seja normal
                Box.Position = UDim2.new(0, PADDING, 0, 0)
            senão
                -- estamos focados e não nos encaixamos, então ajuste a posição
                cursor local = Box.CursorPosition
                se cursor ~= -1 então
                    -- calcula a largura do pixel do texto do início ao cursor
                    subtexto local = string.sub(Box.Text, 1, cursor-1)
                    largura local = TextService:GetTextSize(subtexto, Box.TextSize, Box.Font, Vector2.new(math.huge, math.huge)).X
                    
                    -- verifica se estamos dentro da caixa com o cursor
                    local currentCursorPos = Box.Position.X.Offset + largura

                    -- ajuste se necessário
                    se currentCursorPos < PADDING então
                        Box.Position = UDim2.fromOffset(PADDING-width, 0)
                    elseif currentCursorPos > revelar - PADDING - 1 then
                        Box.Position = UDim2.fromOffset(reveal-width-PADDING-1, 0)
                    fim
                fim
            fim
        fim

        task.spawn(Atualização)

        Box:GetPropertyChangedSignal('Texto'):Connect(Update)
        Box:GetPropertyChangedSignal('CursorPosition'):Connect(Update)
        Box.FocusLost:Connect(Update)
        Box.Focado:Conectar (Atualizar)

        Biblioteca:AddToRegistry(Box, {
            TextColor3 = 'FontColor';
        });

        caixa de texto da função:OnChanged(Func)
            Textbox.Changed = Func;
            Func();
        fim;

        Caixa de grupo:Adicionar em branco(5);
        Caixa de Grupo:Redimensionar();

        Opções[Idx] = Caixa de texto;

        retornar Caixa de texto;
    fim;

    função Funções: AddToggle(Idx, Info)
        Alternar local = {
            Valor = Info.Default ou false;
            Tipo = 'Alternar';

            Complementos = {},
        };

        local Groupbox = self;
        local Container = Groupbox.Container;

        local ToggleOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Tamanho = UDim2.new(0, 13, 0, 13);
            ZÍndice = 5;
            Pai = Contêiner;
        });

        Biblioteca:AddToRegistry(ToggleOuter, {
            BorderColor3 = 'Preto';
        });

        local ToggleInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 6;
            Pai = ToggleOuter;
        });

        Biblioteca:AddToRegistry(ToggleInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        local ToggleLabel = Library:CreateLabel({
            Tamanho = UDim2.new(0, 216, 1, 0);
            Posição = UDim2.new(1, 6, 0, 0);
            TextSize = 14;
            Texto = Info.Texto;
            TextXAlignment = Enum.TextXAlignment.Left;
            ZÍndice = 6;
            Pai = ToggleInner;
        });

        Library:Create('UIListLayout', {
            Preenchimento = UDim.new(0, 4);
            FillDirection = Enum.FillDirection.Horizontal;
            HorizontalAlignment = Enum.HorizontalAlignment.Right;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Pai = ToggleLabel;
        });

        local ToggleRegion = Library:Create('Frame', {
            Transparência de fundo = 1;
            Tamanho = UDim2.new(0, 170, 1, 0);
            ZÍndice = 8;
            Pai = ToggleOuter;
        });

        Biblioteca:OnHighlight(ToggleRegion, ToggleOuter,
            { BorderColor3 = 'AccentColor' },
            { BorderColor3 = 'Preto' }
        );

        função Alternar:Atualizar Cores()
            Alternar:Exibir();
        fim;

        if type(Info.Tooltip) == 'string' then
            Biblioteca: AddToolTip(Info.Tooltip, ToggleRegion)
        fim

        função Alternar: Exibir()
            ToggleInner.BackgroundColor3 = Toggle.Value e Library.AccentColor ou Library.MainColor;
            ToggleInner.BorderColor3 = Toggle.Value e Library.AccentColorDark ou Library.OutlineColor;

            Library.RegistryMap[ToggleInner].Properties.BackgroundColor3 = Toggle.Value e 'AccentColor' ou 'MainColor';
            Library.RegistryMap[ToggleInner].Properties.BorderColor3 = Toggle.Value e 'AccentColorDark' ou 'OutlineColor';
        fim;

        função Alternar: OnChanged(Func)
            Toggle.Changed = Func;
            Func();
        fim;

        função Toggle:SetValue(Bool)
            Bool = (não não Bool);

            Toggle.Value = Bool;
            Alternar:Exibir();

            para _, Addon em seguida, Toggle.Addons fazem
                se Addon.Type == 'KeyPicker' e Addon.SyncToggleState então
                    Addon.Toggled = Bool
                    Complemento:Atualizar()
                fim
            fim

            if Toggle.Changed then
                Toggle.Changed();
            fim;
        fim;

        ToggleRegion.InputBegan:Connect(function(Input)
            se Input.UserInputType == Enum.UserInputType.MouseButton1 e não Library:MouseIsOverOpenedFrame() então
                Toggle:SetValue(not Toggle.Value) -- Por que não foi assim desde o início?
                Biblioteca: Tentativa de Salvar();
            fim;
        fim);

        Alternar:Exibir();
        Groupbox:AddBlank(Info.BlankSize ou 5 + 2);
        Caixa de Grupo:Redimensionar();

        Toggle.TextLabel = ToggleLabel;
        Toggle.Container = Container;
        setmetatable(Toggle, BaseAddons);

        Alterna[Idx] = Alterna;

        retornar Alternar;
    fim;

    função Funções: AddSlider(Idx, Info)
        assert(Info.Default e Info.Text e Info.Min e Info.Max e Info.Rounding, 'Bad Slider Data');

        controle deslizante local = {
            Valor = Info.Default;
            Min = Info.Min;
            Max = Info.Max;
            Arredondamento = Info.Arredondamento;
            MaxSize = 232;
            Tipo = 'Slider';
        };

        local Groupbox = self;
        local Container = Groupbox.Container;

        se não Info.Compact então
            Biblioteca:CreateLabel({
                Tamanho = UDim2.new(1, 0, 0, 10);
                TextSize = 14;
                Texto = Info.Texto;
                TextXAlignment = Enum.TextXAlignment.Left;
                TextYAlignment = Enum.TextYAlignment.Bottom;
                ZÍndice = 5;
                Pai = Contêiner;
            });

            Caixa de grupo:Adicionar em branco(3);
        fim

        local SliderOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Tamanho = UDim2.new(1, -4, 0, 13);
            ZÍndice = 5;
            Pai = Contêiner;
        });

        Biblioteca:AddToRegistry(SliderOuter, {
            BorderColor3 = 'Preto';
        });

        local SliderInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 6;
            Pai = SliderOuter;
        });

        Biblioteca:AddToRegistry(SliderInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        local Fill = Library:Create('Frame', {
            BackgroundColor3 = Library.AccentColor;
            BorderColor3 = Library.AccentColorDark;
            Tamanho = UDim2.new(0, 0, 1, 0);
            ZÍndice = 7;
            Pai = SliderInner;
        });

        Biblioteca:AddToRegistry(Preencher, {
            BackgroundColor3 = 'AccentColor';
            BorderColor3 = 'AccentColorDark';
        });

        local HideBorderRight = Library:Create('Frame', {
            BackgroundColor3 = Library.AccentColor;
            BorderSizePixel = 0;
            Posição = UDim2.new(1, 0, 0, 0);
            Tamanho = UDim2.new(0, 1, 1, 0);
            ZÍndice = 8;
            Pai = Preencher;
        });

        Biblioteca:AddToRegistry(HideBorderRight, {
            BackgroundColor3 = 'AccentColor';
        });

        local DisplayLabel = Biblioteca:CreateLabel({
            Tamanho = UDim2.new(1, 0, 1, 0);
            TextSize = 14;
            Texto = 'Infinito';
            ZÍndice = 9;
            Pai = SliderInner;
        });

        Biblioteca: OnHighlight (SliderOuter, SliderOuter,
            { BorderColor3 = 'AccentColor' },
            { BorderColor3 = 'Preto' }
        );

        if type(Info.Tooltip) == 'string' then
            Biblioteca: AddToolTip(Info.Tooltip, SliderOuter)
        fim

        Função Slider:UpdateColors()
            Fill.BackgroundColor3 = Library.AccentColor;
            Fill.BorderColor3 = Library.AccentColorDark;
        fim;

        Função Slider:Exibir()
            local Sufixo = Info.Suffix ou '';
            DisplayLabel.Text = string.format('%s/%s', Slider.Value .. Sufixo, Slider.Max .. Suffix);

            local X = math.ceil(Library:MapValue(Slider.Value, Slider.Min, Slider.Max, 0, Slider.MaxSize));
            Fill.Size = UDim2.new(0, X, 1, 0);

            HideBorderRight.Visible = não (X == Slider.MaxSize ou X == 0);
        fim;

        Função Slider: OnChanged(Func)
            Slider.Changed = Func;
            Func();
        fim;

        função local Round(Valor)
            if Slider.Rounding == 0 then
                return math.floor(Valor);
            fim;

            local Str = Valor .. '';
            local Ponto = Str:find('%.');

            return Dot e tonumber(Str:sub(1, Dot + Slider.Rounding)) ou Value;
        fim;

        Função Slider:GetValueFromXOffset(X)
            return Round(Biblioteca:MapValue(X, 0, Slider.MaxSize, Slider.Min, Slider.Max));
        fim;

        Função Slider:SetValue(Str)
            local Num = tonumber(Str);

            se (não Num) então
                Retorna;
            fim;

            Num = math.clamp(Num, Slider.Min, Slider.Max);

            Slider.Value = Num;
            Controle deslizante:Exibir();

            se Slider.Changed then
                Slider.Alterado();
            fim;
        fim;

        SliderInner.InputBegan:Connect(function(Input)
            se Input.UserInputType == Enum.UserInputType.MouseButton1 e não Library:MouseIsOverOpenedFrame() então
                local mPos = Mouse.X;
                gPos local = Fill.Size.X.Offset;
                local Diff = mPos - (Fill.AbsolutePosition.X + gPos);

                enquanto InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) faça
                    local nMPos = Mouse.X;
                    local nX = math.clamp(gPos + (nMPos - mPos) + Diff, 0, Slider.MaxSize);

                    local nValue = Slider:GetValueFromXOffset(nX);
                    local OldValue = Slider.Value;
                    Slider.Value = nValue;

                    Controle deslizante:Exibir();

                    if nValue ~= OldValue e Slider.Changed then
                        Slider.Alterado();
                    fim;

                    RenderStepped:Wait();
                fim;

                Biblioteca: Tentativa de Salvar();
            fim;
        fim);

        Controle deslizante:Exibir();
        Groupbox:AddBlank(Info.BlankSize ou 6);
        Caixa de Grupo:Redimensionar();

        Opções[Idx] = Controle deslizante;

        controle deslizante de retorno;
    fim;

    função Funções: AddDropdown(Idx, Info)
        assert(Info.Text e Info.Values, 'Bad Dropdown Data');

        lista suspensa local = {
            Valores = Info.Values;
            Valor = Info.Multi e {};
            Multi = Info.Multi;
            Tipo = 'Suspensão';
        };

        local Groupbox = self;
        local Container = Groupbox.Container;

        local RelativeOffset = 0;

        local DropdownLabel = Library:CreateLabel({
            Tamanho = UDim2.new(1, 0, 0, 10);
            TextSize = 14;
            Texto = Info.Texto;
            TextXAlignment = Enum.TextXAlignment.Left;
            TextYAlignment = Enum.TextYAlignment.Bottom;
            ZÍndice = 5;
            Pai = Contêiner;
        });

        Caixa de grupo:Adicionar em branco(3);

        for _, Element in next, Container:GetChildren() do
            se não Element:IsA('UIListLayout') então
                RelativeOffset = RelativeOffset + Element.Size.Y.Offset;
            fim;
        fim;

        local DropdownOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Tamanho = UDim2.new(1, -4, 0, 20);
            ZÍndice = 5;
            Pai = Contêiner;
        });

        Biblioteca:AddToRegistry(DropdownOuter, {
            BorderColor3 = 'Preto';
        });

        local DropdownInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 6;
            Pai = DropdownOuter;
        });

        Biblioteca:AddToRegistry(DropdownInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        Library:Create('UIGradient', {
            Cor = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
            });
            Rotação = 90;
            Pai = DropdownInner;
        });

        local DropdownArrow = Library:Create('ImageLabel', {
            Ponto de Âncora = Vector2.new(0, 0,5);
            Transparência de fundo = 1;
            Posição = UDim2.new(1, -16, 0,5, 0);
            Tamanho = UDim2.new(0, 12, 0, 12);
            Imagem = 'http://www.roblox.com/asset/?id=6282522798';
            ZÍndice = 7;
            Pai = DropdownInner;
        });

        local ItemList = Library:CreateLabel({
            Posição = UDim2.new(0, 5, 0, 0);
            Tamanho = UDim2.new(1, -5, 1, 0);
            TextSize = 14;
            Texto = '--';
            TextXAlignment = Enum.TextXAlignment.Left;
            TextWrapped = true;
            ZÍndice = 7;
            Pai = DropdownInner;
        });

        Biblioteca:OnHighlight(DropdownOuter, DropdownOuter,
            { BorderColor3 = 'AccentColor' },
            { BorderColor3 = 'Preto' }
        );

        if type(Info.Tooltip) == 'string' then
            Biblioteca: AddToolTip(Info.Tooltip, DropdownOuter)
        fim

        locais MAX_DROPDOWN_ITEMS = 8;

        local ListOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Posição = UDim2.new(0, 4, 0, 20 + RelativeOffset + 1 + 20);
            Tamanho = UDim2.new(1, -8, 0, MAX_DROPDOWN_ITEMS * 20 + 2);
            ZÍndice = 20;
            Visível = falso;
            Pai = Container.Parent;
        });

        local ListInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            BorderSizePixel = 0;
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 21;
            Pai = ListOuter;
        });

        Biblioteca:AddToRegistry(ListInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        local Scrolling = Library:Create('ScrollingFrame', {
            Transparência de fundo = 1;
            CanvasSize = UDim2.new(0, 0, 0, 0);
            Tamanho = UDim2.new(1, 0, 1, 0);
            ZÍndice = 21;
            Pai = ListInner;

            TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',
            BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',

            ScrollBarThickness = 3,
            ScrollBarImageColor3 = Library.AccentColor,
        });

        Biblioteca:AddToRegistry(Rolagem, {
            ScrollBarImageColor3 = 'AccentColor'
        })

        Library:Create('UIListLayout', {
            Preenchimento = UDim.new(0, 0);
            FillDirection = Enum.FillDirection.Vertical;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Pai = Rolagem;
        });

        Função suspensa:Exibir()
            Valores locais = Dropdown.Values;
            local St = '';

            se Info.Multi então
                para Idx, Valor em próximo, Valores fazem
                    se Dropdown.Value[Value] então
                        Str = Str .. Valor .. ', ';
                    fim;
                fim;

                Str = Str:sub(1, #Str - 2);
            senão
                Str = Dropdown.Value ou '';
            fim;

            ItemList.Text = (Str == '' e '--' ou Str);
        fim;

        Função suspensa: GetActiveValues()
            se Info.Multi então
                local T = {};

                for Value, Bool in next, Dropdown.Value do
                    table.insert(T, Valor);
                fim;

                retornar T;
            senão
                retorne Dropdown.Value e 1 ou 0;
            fim;
        fim;

        função Dropdown:SetValues()
            Valores locais = Dropdown.Values;
            Botões locais = {};

            for _, Element in next, Scrolling:GetChildren() do
                se não Element:IsA('UIListLayout') então
                    -- Library:RemoveFromRegistry(Element);
                    Elemento:Destruir();
                fim;
            fim;

            contagem local = 0;

            para Idx, Valor em próximo, Valores fazem
                Tabela local = {};

                Contagem = Contagem + 1;

                Botão local = Library:Create('Frame', {
                    BackgroundColor3 = Library.MainColor;
                    BorderColor3 = Library.OutlineColor;
                    BorderMode = Enum.BorderMode.Middle;
                    Tamanho = UDim2.new(1, -1, 0, 20);
                    ZÍndice = 23;
                    Ativo = verdadeiro,
                    Pai = Rolagem;
                });

                Biblioteca:AddToRegistry(Botão, {
                    BackgroundColor3 = 'MainColor';
                    BorderColor3 = 'OutlineColor';
                });

                local ButtonLabel = Biblioteca:CreateLabel({
                    Tamanho = UDim2.new(1, -6, 1, 0);
                    Posição = UDim2.new(0, 6, 0, 0);
                    TextSize = 14;
                    Texto = Valor;
                    TextXAlignment = Enum.TextXAlignment.Left;
                    ZÍndice = 25;
                    Pai = Botão;
                });

                Biblioteca:OnHighlight(Botão, Botão,
                    { BorderColor3 = 'AccentColor', ZIndex = 24 },
                    {BorderColor3 = 'OutlineColor', ZIndex = 23 }
                );

                local Selecionado;

                se Info.Multi então
                    Selecionado = Dropdown.Value[Value];
                senão
                    Selected = Dropdown.Value == Value;
                end;

                function Table:UpdateButton()
                    if Info.Multi then
                        Selected = Dropdown.Value[Value];
                    else
                        Selected = Dropdown.Value == Value;
                    end;

                    ButtonLabel.TextColor3 = Selected and Library.AccentColor or Library.FontColor;
                    Library.RegistryMap[ButtonLabel].Properties.TextColor3 = Selected and 'AccentColor' or 'FontColor';
                end;

                ButtonLabel.InputBegan:Connect(function(Input)
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local Try = not Selected;

                        if Dropdown:GetActiveValues() == 1 and (not Try) and (not Info.AllowNull) then
                        else
                            if Info.Multi then
                                Selected = Try;

                                if Selected then
                                    Dropdown.Value[Value] = true;
                                else
                                    Dropdown.Value[Value] = nil;
                                end;
                            else
                                Selected = Try;

                                if Selected then
                                    Dropdown.Value = Value;
                                else
                                    Dropdown.Value = nil;
                                end;

                                for _, OtherButton in next, Buttons do
                                    OtherButton:UpdateButton();
                                end;
                            end;

                            Table:UpdateButton();
                            Dropdown:Display();

                            if Dropdown.Changed then
                                Dropdown.Changed();
                            end;

                            Library:AttemptSave();
                        end;
                    end;
                end);

                Table:UpdateButton();
                Dropdown:Display();

                Buttons[Button] = Table;
            end;

            local Y = math.clamp(Count * 20, 0, MAX_DROPDOWN_ITEMS * 20) + 1;
            ListOuter.Size = UDim2.new(1, -8, 0, Y);
            Scrolling.CanvasSize = UDim2.new(0, 0, 0, (Count * 20) + 1);

            -- ListOuter.Size = UDim2.new(1, -8, 0, (#Values * 20) + 2);
        end;

        function Dropdown:OpenDropdown()
            ListOuter.Visible = true;
            Library.OpenedFrames[ListOuter] = true;
            DropdownArrow.Rotation = 180;
        end;

        function Dropdown:CloseDropdown()
            ListOuter.Visible = false;
            Library.OpenedFrames[ListOuter] = nil;
            DropdownArrow.Rotation = 0;
        end;

        function Dropdown:OnChanged(Func)
            Dropdown.Changed = Func;
            Func();
        end;

        function Dropdown:SetValue(Val)
            if Dropdown.Multi then
                local nTable = {};

                for Value, Bool in next, Val do
                    if table.find(Dropdown.Values, Value) then
                        nTable[Value] = true
                    end;
                end;

                Dropdown.Value = nTable;
            else
                if (not Val) then
                    Dropdown.Value = nil;
                elseif table.find(Dropdown.Values, Val) then
                    Dropdown.Value = Val;
                end;
            end;

            Dropdown:SetValues();
            Dropdown:Display();
            
            if Dropdown.Changed then Dropdown.Changed() end
        end;

        DropdownOuter.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
                if ListOuter.Visible then
                    Dropdown:CloseDropdown();
                else
                    Dropdown:OpenDropdown();
                end;
            end;
        end);

        InputService.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                local AbsPos, AbsSize = ListOuter.AbsolutePosition, ListOuter.AbsoluteSize;

                if Mouse.X < AbsPos.X or Mouse.X > AbsPos.X + AbsSize.X
                    or Mouse.Y < (AbsPos.Y - 20 - 1) or Mouse.Y > AbsPos.Y + AbsSize.Y then

                    Dropdown:CloseDropdown();
                end;
            end;
        end);

        Dropdown:SetValues();
        Dropdown:Display();

        if type(Info.Default) == 'string' then
            Info.Default = table.find(Dropdown.Values, Info.Default)
        end

        if Info.Default then
            if Info.Multi then
                Dropdown.Value[Dropdown.Values[Info.Default]] = true;
            else
                Dropdown.Value = Dropdown.Values[Info.Default];
            end;

            Dropdown:SetValues();
            Dropdown:Display();
        end;

        Groupbox:AddBlank(Info.BlankSize or 5);
        Groupbox:Resize();

        Options[Idx] = Dropdown;

        return Dropdown;
    end;

    BaseGroupbox.__index = Funcs;
    BaseGroupbox.__namecall = function(Table, Key, ...)
        return Funcs[Key](...);
    end;
end;

-- < Create other UI elements >
do
    Library.NotificationArea = Library:Create('Frame', {
        BackgroundTransparency = 1;
        Position = UDim2.new(0, 0, 0, 40);
        Size = UDim2.new(0, 300, 0, 200);
        ZIndex = 100;
        Parent = ScreenGui;
    });

    Library:Create('UIListLayout', {
        Padding = UDim.new(0, 4);
        FillDirection = Enum.FillDirection.Vertical;
        SortOrder = Enum.SortOrder.LayoutOrder;
        Parent = Library.NotificationArea;
    });

    local WatermarkOuter = Library:Create('Frame', {
        BorderColor3 = Color3.new(0, 0, 0);
        Position = UDim2.new(0, 100, 0, -25);
        Size = UDim2.new(0, 213, 0, 20);
        ZIndex = 200;
        Visible = false;
        Parent = ScreenGui;
    });

    local WatermarkInner = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor;
        BorderColor3 = Library.AccentColor;
        BorderMode = Enum.BorderMode.p;
        Size = UDim2.new(1, 0, 1, 0);
        ZIndex = 201;
        Parent = WatermarkOuter;
    });

    Library:AddToRegistry(WatermarkInner, {
        BorderColor3 = 'AccentColor';
    });

    local InnerFrame = Library:Create('Frame', {
        BackgroundColor3 = Color3.new(1, 1, 1);
        BorderSizePixel = 0;
        Position = UDim2.new(0, 1, 0, 1);
        Size = UDim2.new(1, -2, 1, -2);
        ZIndex = 202;
        Parent = WatermarkInner;
    });

    local Gradient = Library:Create('UIGradient', {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
            ColorSequenceKeypoint.new(1, Library.MainColor),
        });
        Rotation = -90;
        Parent = InnerFrame;
    });

    Library:AddToRegistry(Gradient, {
        Color = function()
            return ColorSequence.new({
                ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
                ColorSequenceKeypoint.new(1, Library.MainColor),
            });
        end
    });

    local WatermarkLabel = Library:CreateLabel({
        Position = UDim2.new(0, 5, 0, 0);
        Size = UDim2.new(1, -4, 1, 0);
        TextSize = 14;
        TextXAlignment = Enum.TextXAlignment.Left;
        ZIndex = 203;
        Parent = InnerFrame;
    });

    Library.Watermark = WatermarkOuter;
    Library.WatermarkText = WatermarkLabel;
    Library:MakeDraggable(Library.Watermark);



    local KeybindOuter = Library:Create('Frame', {
        AnchorPoint = Vector2.new(0, 0.5);
        BorderColor3 = Color3.new(0, 0, 0);
        Position = UDim2.new(0, 10, 0.5, 0);
        Size = UDim2.new(0, 210, 0, 20);
        Visible = false;
        ZIndex = 100;
        Parent = ScreenGui;
    });

    local KeybindInner = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor;
        BorderColor3 = Library.OutlineColor;
        BorderMode = Enum.BorderMode.p;
        Size = UDim2.new(1, 0, 1, 0);
        ZIndex = 101;
        Parent = KeybindOuter;
    });

    Library:AddToRegistry(KeybindInner, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'OutlineColor';
    }, true);

    local ColorFrame = Library:Create('Frame', {
        BackgroundColor3 = Library.AccentColor;
        BorderSizePixel = 0;
        Size = UDim2.new(1, 0, 0, 2);
        ZIndex = 102;
        Parent = KeybindInner;
    });

    Library:AddToRegistry(ColorFrame, {
        BackgroundColor3 = 'AccentColor';
    }, true);

    local KeybindLabel = Library:CreateLabel({
        Size = UDim2.new(1, 0, 0, 20);
        Position = UDim2.fromOffset(5, 2),
        TextXAlignment = Enum.TextXAlignment.Left,
        
        Text = 'Keybinds';
        ZIndex = 104;
        Parent = KeybindInner;
    });

    local KeybindContainer = Library:Create('Frame', {
        BackgroundTransparency = 1;
        Size = UDim2.new(1, 0, 1, -20);
        Position = UDim2.new(0, 0, 0, 20);
        ZIndex = 1;
        Parent = KeybindInner;
    });

    Library:Create('UIListLayout', {
        FillDirection = Enum.FillDirection.Vertical;
        SortOrder = Enum.SortOrder.LayoutOrder;
        Parent = KeybindContainer;
    });

    Library:Create('UIPadding', {
        PaddingLeft = UDim.new(0, 5),
        Parent = KeybindContainer,
    })

    Library.KeybindFrame = KeybindOuter;
    Library.KeybindContainer = KeybindContainer;
    Library:MakeDraggable(KeybindOuter);
end;

function Library:SetWatermarkVisibility(Bool)
    Library.Watermark.Visible = Bool;
end;

function Library:SetWatermark(Text)
    local X, Y = Library:GetTextBounds(Text, Enum.Font.Code, 14);
    Library.Watermark.Size = UDim2.new(0, X + 15, 0, (Y * 1.5) + 3);
    Library:SetWatermarkVisibility(true)

    Library.WatermarkText.Text = Text;
end;

function Library:Notify(Text, Time)
    local XSize, YSize = Library:GetTextBounds(Text, Enum.Font.Code, 14);

    YSize = YSize + 7

    local NotifyOuter = Library:Create('Frame', {
        BorderColor3 = Color3.new(0, 0, 0);
        Position = UDim2.new(0, 100, 0, 10);
        Size = UDim2.new(0, 0, 0, YSize);
        ClipsDescendants = true;
        ZIndex = 100;
        Parent = Library.NotificationArea;
    });

    local NotifyInner = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor;
        BorderColor3 = Library.OutlineColor;
        BorderMode = Enum.BorderMode.Inset;
        Size = UDim2.new(1, 0, 1, 0);
        ZIndex = 101;
        Parent = NotifyOuter;
    });

    Library:AddToRegistry(NotifyInner, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'OutlineColor';
    }, true);

    local InnerFrame = Library:Create('Frame', {
        BackgroundColor3 = Color3.new(1, 1, 1);
        BorderSizePixel = 0;
        Position = UDim2.new(0, 1, 0, 1);
        Size = UDim2.new(1, -2, 1, -2);
        ZIndex = 102;
        Parent = NotifyInner;
    });

    local Gradient = Library:Create('UIGradient', {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
            ColorSequenceKeypoint.new(1, Library.MainColor),
        });
        Rotation = -90;
        Parent = InnerFrame;
    });

    Library:AddToRegistry(Gradient, {
        Color = function()
            return ColorSequence.new({
                ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
                ColorSequenceKeypoint.new(1, Library.MainColor),
            });
        end
    });

    local NotifyLabel = Library:CreateLabel({
        Position = UDim2.new(0, 4, 0, 0);
        Size = UDim2.new(1, -4, 1, 0);
        Text = Text;
        TextXAlignment = Enum.TextXAlignment.Left;
        TextSize = 14;
        ZIndex = 103;
        Parent = InnerFrame;
    });

    local LeftColor = Library:Create('Frame', {
        BackgroundColor3 = Library.AccentColor;
        BorderSizePixel = 0;
        Position = UDim2.new(0, -1, 0, -1);
        Size = UDim2.new(0, 3, 1, 2);
        ZIndex = 104;
        Parent = NotifyOuter;
    });

    Library:AddToRegistry(LeftColor, {
        BackgroundColor3 = 'AccentColor';
    }, true);

    pcall(NotifyOuter.TweenSize, NotifyOuter, UDim2.new(0, XSize + 8 + 4, 0, YSize), 'Out', 'Quad', 0.4, true);

    task.spawn(function()
        wait(Time or 5);

        pcall(NotifyOuter.TweenSize, NotifyOuter, UDim2.new(0, 0, 0, YSize), 'Out', 'Quad', 0.4, true);

        wait(0.4);

        NotifyOuter:Destroy();
    end);
end;

function Library:CreateWindow(...)
    local Arguments = { ... }
    local Config = { AnchorPoint = Vector2.zero }

    if type(...) == 'table' then
        Config = ...;
    else
        Config.Title = Arguments[1]
        Config.AutoShow = Arguments[2] or false;
    end
    
    if type(Config.Title) ~= 'string' then Config.Title = 'No title' end
    
    if typeof(Config.Position) ~= 'UDim2' then Config.Position = UDim2.fromOffset(175, 50) end
    if typeof(Config.Size) ~= 'UDim2' then Config.Size = UDim2.fromOffset(550, 600) end

    if Config.Center then
        Config.AnchorPoint = Vector2.new(0.5, 0.5)
        Config.Position = UDim2.fromScale(0.5, 0.5)
    end

    local Window = {
        Tabs = {};
    };

    local Outer = Library:Create('Frame', {
        AnchorPoint = Config.AnchorPoint,
        BackgroundColor3 = Color3.new(0, 0, 0);
        BorderSizePixel = 0;
        Position = Config.Position,
        Size = Config.Size,
        Visible = false;
        ZIndex = 1;
        Parent = ScreenGui;
    });

    Library:MakeDraggable(Outer, 25);

    local Inner = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor;
        BorderColor3 = Library.AccentColor;
        BorderMode = Enum.BorderMode.Inset;
        Position = UDim2.new(0, 1, 0, 1);
        Size = UDim2.new(1, -2, 1, -2);
        ZIndex = 1;
        Parent = Outer;
    });

    Library:AddToRegistry(Inner, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'AccentColor';
    });

    local WindowLabel = Library:CreateLabel({
        Position = UDim2.new(0, 7, 0, 0);
        Size = UDim2.new(0, 0, 0, 25);
        Text = Config.Title or '';
        TextXAlignment = Enum.TextXAlignment.Left;
        ZIndex = 1;
        Parent = Inner;
    });

    local MainSectionOuter = Library:Create('Frame', {
        BackgroundColor3 = Library.BackgroundColor;
        BorderColor3 = Library.OutlineColor;
        Position = UDim2.new(0, 8, 0, 25);
        Size = UDim2.new(1, -16, 1, -33);
        ZIndex = 1;
        Parent = Inner;
    });

    Library:AddToRegistry(MainSectionOuter, {
        BackgroundColor3 = 'BackgroundColor';
        BorderColor3 = 'OutlineColor';
    });

    local MainSectionInner = Library:Create('Frame', {
        BackgroundColor3 = Library.BackgroundColor;
        BorderColor3 = Color3.new(0, 0, 0);
        BorderMode = Enum.BorderMode.Inset;
        Position = UDim2.new(0, 0, 0, 0);
        Size = UDim2.new(1, 0, 1, 0);
        ZIndex = 1;
        Parent = MainSectionOuter;
    });

    Library:AddToRegistry(MainSectionInner, {
        BackgroundColor3 = 'BackgroundColor';
    });

    local TabArea = Library:Create('Frame', {
        BackgroundTransparency = 1;
        Position = UDim2.new(0, 8, 0, 8);
        Size = UDim2.new(1, -16, 0, 21);
        ZIndex = 1;
        Parent = MainSectionInner;
    });

    Library:Create('UIListLayout', {
        Padding = UDim.new(0, 0);
        FillDirection = Enum.FillDirection.Horizontal;
        SortOrder = Enum.SortOrder.LayoutOrder;
        Parent = TabArea;
    });

    local TabContainer = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor;
        BorderColor3 = Library.OutlineColor;
        Position = UDim2.new(0, 8, 0, 30);
        Size = UDim2.new(1, -16, 1, -38);
        ZIndex = 2;
        Parent = MainSectionInner;
    });

    Library:AddToRegistry(TabContainer, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'OutlineColor';
    });

    function Window:SetWindowTitle(Title)
        WindowLabel.Text = Title;
    end;

    function Window:AddTab(Name)
        local Tab = {
            Groupboxes = {};
            Tabboxes = {};
        };

        local TabButtonWidth = Library:GetTextBounds(Name, Enum.Font.Code, 16);

        local TabButton = Library:Create('Frame', {
            BackgroundColor3 = Library.BackgroundColor;
            BorderColor3 = Library.OutlineColor;
            Size = UDim2.new(0, TabButtonWidth + 8 + 4, 1, 0);
            ZIndex = 1;
            Parent = TabArea;
        });

        Library:AddToRegistry(TabButton, {
            BackgroundColor3 = 'BackgroundColor';
            BorderColor3 = 'OutlineColor';
        });

        local TabButtonLabel = Library:CreateLabel({
            Position = UDim2.new(0, 0, 0, 0);
            Size = UDim2.new(1, 0, 1, -1);
            Text = Name;
            ZIndex = 1;
            Parent = TabButton;
        });

        local Blocker = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderSizePixel = 0;
            Position = UDim2.new(0, 0, 1, 0);
            Size = UDim2.new(1, 0, 0, 1);
            BackgroundTransparency = 1;
            ZIndex = 3;
            Parent = TabButton;
        });

        Library:AddToRegistry(Blocker, {
            BackgroundColor3 = 'MainColor';
        });

        local TabFrame = Library:Create('Frame', {
            BackgroundTransparency = 1;
            Position = UDim2.new(0, 0, 0, 0);
            Size = UDim2.new(1, 0, 1, 0);
            Visible = false;
            ZIndex = 2;
            Parent = TabContainer;
        });

        local LeftSide = Library:Create('Frame', {
            BackgroundTransparency = 1;
            Position = UDim2.new(0, 8, 0, 8);
            Size = UDim2.new(0.5, -12, 0, 507);
            ZIndex = 2;
            Parent = TabFrame;
        });

        local RightSide = Library:Create('Frame', {
            BackgroundTransparency = 1;
            Position = UDim2.new(0.5, 4, 0, 8);
            Size = UDim2.new(0.5, -12, 0, 507);
            ZIndex = 2;
            Parent = TabFrame;
        });

        Library:Create('UIListLayout', {
            Padding = UDim.new(0, 8);
            FillDirection = Enum.FillDirection.Vertical;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Parent = LeftSide;
        });

        Library:Create('UIListLayout', {
            Padding = UDim.new(0, 8);
            FillDirection = Enum.FillDirection.Vertical;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Parent = RightSide;
        });

        function Tab:ShowTab()
            for _, Tab in next, Window.Tabs do
                Tab:HideTab();
            end;

            Blocker.BackgroundTransparency = 0;
            TabButton.BackgroundColor3 = Library.MainColor;
            Library.RegistryMap[TabButton].Properties.BackgroundColor3 = 'MainColor';
            TabFrame.Visible = true;
        end;

        function Tab:HideTab()
            Blocker.BackgroundTransparency = 1;
            TabButton.BackgroundColor3 = Library.BackgroundColor;
            Library.RegistryMap[TabButton].Properties.BackgroundColor3 = 'BackgroundColor';
            TabFrame.Visible = false;
        end;

        function Tab:AddGroupbox(Info)
            local Groupbox = {};

            local BoxOuter = Library:Create('Frame', {
                BackgroundColor3 = Library.BackgroundColor;
                BorderColor3 = Library.OutlineColor;
                Size = UDim2.new(1, 0, 0, 507);
                ZIndex = 2;
                Parent = Info.Side == 1 and LeftSide or RightSide;
            });

            Library:AddToRegistry(BoxOuter, {
                BackgroundColor3 = 'BackgroundColor';
                BorderColor3 = 'OutlineColor';
            });

            local BoxInner = Library:Create('Frame', {
                BackgroundColor3 = Library.BackgroundColor;
                BorderColor3 = Color3.new(0, 0, 0);
                BorderMode = Enum.BorderMode.Inset;
                Size = UDim2.new(1, 0, 1, 0);
                ZIndex = 4;
                Parent = BoxOuter;
            });

            Library:AddToRegistry(BoxInner, {
                BackgroundColor3 = 'BackgroundColor';
            });

            local Highlight = Library:Create('Frame', {
                BackgroundColor3 = Library.AccentColor;
                BorderSizePixel = 0;
                Size = UDim2.new(1, 0, 0, 2);
                ZIndex = 5;
                Parent = BoxInner;
            });

            Library:AddToRegistry(Highlight, {
                BackgroundColor3 = 'AccentColor';
            });

            local GroupboxLabel = Library:CreateLabel({
                Size = UDim2.new(1, 0, 0, 18);
                Position = UDim2.new(0, 4, 0, 2);
                TextSize = 14;
                Text = Info.Name;
                TextXAlignment = Enum.TextXAlignment.Left;
                ZIndex = 5;
                Parent = BoxInner;
            });

            local Container = Library:Create('Frame', {
                BackgroundTransparency = 1;
                Position = UDim2.new(0, 4, 0, 20);
                Size = UDim2.new(1, -4, 1, -20);
                ZIndex = 1;
                Parent = BoxInner;
            });

            Library:Create('UIListLayout', {
                FillDirection = Enum.FillDirection.Vertical;
                SortOrder = Enum.SortOrder.LayoutOrder;
                Parent = Container;
            });

            function Groupbox:Resize()
                local Size = 0;

                for _, Element in next, Groupbox.Container:GetChildren() do
                    if not Element:IsA('UIListLayout') then
                        Size = Size + Element.Size.Y.Offset;
                    end;
                end;

                BoxOuter.Size = UDim2.new(1, 0, 0, 20 + Size + 2);
            end;

            Groupbox.Container = Container;
            setmetatable(Groupbox, BaseGroupbox);

            Groupbox:AddBlank(3);
            Groupbox:Resize();

            Tab.Groupboxes[Info.Name] = Groupbox;

            return Groupbox;
        end;

        function Tab:AddLeftGroupbox(Name)
            return Tab:AddGroupbox({ Side = 1; Name = Name; });
        end;

        function Tab:AddRightGroupbox(Name)
            return Tab:AddGroupbox({ Side = 2; Name = Name; });
        end;

        function Tab:AddTabbox(Info)
            local Tabbox = {
                Tabs = {};
            };

            local BoxOuter = Library:Create('Frame', {
                BackgroundColor3 = Library.BackgroundColor;
                BorderColor3 = Library.OutlineColor;
                Size = UDim2.new(1, 0, 0, 0);
                ZIndex = 2;
                Parent = Info.Side == 1 and LeftSide or RightSide;
            });

            Library:AddToRegistry(BoxOuter, {
                BackgroundColor3 = 'BackgroundColor';
                BorderColor3 = 'OutlineColor';
            });

            local BoxInner = Library:Create('Frame', {
                BackgroundColor3 = Library.BackgroundColor;
                BorderColor3 = Color3.new(0, 0, 0);
                BorderMode = Enum.BorderMode.Inset;
                Size = UDim2.new(1, 0, 1, 0);
                ZIndex = 4;
                Parent = BoxOuter;
            });

            Library:AddToRegistry(BoxInner, {
                BackgroundColor3 = 'BackgroundColor';
            });

            local Highlight = Library:Create('Frame', {
                BackgroundColor3 = Library.AccentColor;
                BorderSizePixel = 0;
                Size = UDim2.new(1, 0, 0, 2);
                ZIndex = 10;
                Parent = BoxInner;
            });

            Library:AddToRegistry(Highlight, {
                BackgroundColor3 = 'AccentColor';
            });

            local TabboxButtons = Library:Create('Frame', {
                BackgroundTransparency = 1;
                Position = UDim2.new(0, 0, 0, 1);
                Size = UDim2.new(1, 0, 0, 18);
                ZIndex = 5;
                Parent = BoxInner;
            });

            Library:Create('UIListLayout', {
                FillDirection = Enum.FillDirection.Horizontal;
                HorizontalAlignment = Enum.HorizontalAlignment.Left;
                SortOrder = Enum.SortOrder.LayoutOrder;
                Parent = TabboxButtons;
            });

            function Tabbox:AddTab(Name)
                local Tab = {};

                local Button = Library:Create('Frame', {
                    BackgroundColor3 = Library.MainColor;
                    BorderColor3 = Color3.new(0, 0, 0);
                    Size = UDim2.new(0.5, 0, 1, 0);
                    ZIndex = 6;
                    Parent = TabboxButtons;
                });

                Library:AddToRegistry(Button, {
                    BackgroundColor3 = 'MainColor';
                });

                local ButtonLabel = Library:CreateLabel({
                    Size = UDim2.new(1, 0, 1, 0);
                    TextSize = 14;
                    Text = Name;
                    TextXAlignment = Enum.TextXAlignment.Center;
                    ZIndex = 7;
                    Parent = Button;
                });

                local Block = Library:Create('Frame', {
                    BackgroundColor3 = Library.BackgroundColor;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 1, 0);
                    Size = UDim2.new(1, 0, 0, 1);
                    Visible = false;
                    ZIndex = 9;
                    Parent = Button;
                });

                Library:AddToRegistry(Block, {
                    BackgroundColor3 = 'BackgroundColor';
                });

                local Container = Library:Create('Frame', {
                    Position = UDim2.new(0, 4, 0, 20);
                    Size = UDim2.new(1, -4, 1, -20);
                    ZIndex = 1;
                    Visible = false;
                    Parent = BoxInner;
                });

                Library:Create('UIListLayout', {
                    FillDirection = Enum.FillDirection.Vertical;
                    SortOrder = Enum.SortOrder.LayoutOrder;
                    Parent = Container;
                });

                function Tab:Show()
                    for _, Tab in next, Tabbox.Tabs do
                        Tab:Hide();
                    end;

                    Container.Visible = true;
                    Block.Visible = true;

                    Button.BackgroundColor3 = Library.BackgroundColor;
                    Library.RegistryMap[Button].Properties.BackgroundColor3 = 'BackgroundColor';
                end;

                function Tab:Hide()
                    Container.Visible = false;
                    Block.Visible = false;

                    Button.BackgroundColor3 = Library.MainColor;
                    Library.RegistryMap[Button].Properties.BackgroundColor3 = 'MainColor';
                end;

                function Tab:Resize()
                    local TabCount = 0;

                    for _, Tab in next, Tabbox.Tabs do
                        TabCount = TabCount +  1;
                    end;

                    for _, Button in next, TabboxButtons:GetChildren() do
                        if not Button:IsA('UIListLayout') then
                            Button.Size = UDim2.new(1 / TabCount, 0, 1, 0);
                        end;
                    end;

                    local Size = 0;

                    for _, Element in next, Tab.Container:GetChildren() do
                        if not Element:IsA('UIListLayout') then
                            Size = Size + Element.Size.Y.Offset;
                        end;
                    end;

                    if BoxOuter.Size.Y.Offset < 20 + Size + 2 then
                        BoxOuter.Size = UDim2.new(1, 0, 0, 20 + Size + 2);
                    end;
                end;

                Button.InputBegan:Connect(function(Input)
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
                        Tab:Show();
                    end;
                end);

                Tab.Container = Container;
                Tabbox.Tabs[Name] = Tab;

                setmetatable(Tab, BaseGroupbox);

                Tab:AddBlank(3);
                Tab:Resize();

                if #TabboxButtons:GetChildren() == 2 then
                    Tab:Show();
                end;

                return Tab;
            end;

            Tab.Tabboxes[Info.Name or ''] = Tabbox;

            return Tabbox;
        end;

        function Tab:AddLeftTabbox(Name)
            return Tab:AddTabbox({ Name = Name, Side = 1; });
        end;

        function Tab:AddRightTabbox(Name)
            return Tab:AddTabbox({ Name = Name, Side = 2; });
        end;

        TabButton.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                Tab:ShowTab();
            end;
        end);

        -- This was the first tab added, so we show it by default.
        if #TabContainer:GetChildren() == 1 then
            Tab:ShowTab();
        end;

        Window.Tabs[Name] = Tab;
        return Tab;
    end;

    local ModalElement = Library:Create('TextButton', {
        BackgroundTransparency = 1;
        Size = UDim2.new(0, 0, 0, 0);
        Visible = true;
        Text = '';
        Modal = false;
        Parent = ScreenGui;
    });

    function Library.Toggle()
        Outer.Visible = not Outer.Visible;
        ModalElement.Modal = Outer.Visible;

        local oIcon = Mouse.Icon;
        local State = InputService.MouseIconEnabled;

        local Cursor = Drawing.new('Triangle');
        Cursor.Thickness = 1;
        Cursor.Filled = true;

        while Outer.Visible do
            local mPos = workspace.CurrentCamera:WorldToViewportPoint(Mouse.Hit.p);

            Cursor.Color = Library.AccentColor;
            Cursor.PointA = Vector2.new(mPos.X, mPos.Y);
            Cursor.PointB = Vector2.new(mPos.X, mPos.Y) + Vector2.new(6, 14);
            Cursor.PointC = Vector2.new(mPos.X, mPos.Y) + Vector2.new(-6, 14);

            Cursor.Visible = not InputService.MouseIconEnabled;

            RenderStepped:Wait();
        end;

        Cursor:Remove();
    end

    Library:GiveSignal(InputService.InputBegan:Connect(function(Input, Processed)
        if type(Library.ToggleKeybind) == 'table' and Library.ToggleKeybind.Type == 'KeyPicker' then
            if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode.Name == Library.ToggleKeybind.Value then
                task.spawn(Library.Toggle)
            end
        elseif Input.KeyCode == Enum.KeyCode.P or (Input.KeyCode == Enum.Del and (not Processed)) then
            task.spawn(Library.Toggle)
        end
    end))

    if Config.AutoShow then task.spawn(Library.Toggle) end

    Window.Holder = Outer;

    return Window;
end;

return Library
